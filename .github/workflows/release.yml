name: Release

on:
  release:
    types: [created]

jobs:
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org/'
      
      - name: Check for package-lock.json
        id: check-lock-file
        run: |
          if [ -f "package-lock.json" ]; then
            echo "lock_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "lock_file_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install dependencies (with lock file)
        if: steps.check-lock-file.outputs.lock_file_exists == 'true'
        run: npm ci
      
      - name: Install dependencies (without lock file)
        if: steps.check-lock-file.outputs.lock_file_exists == 'false'
        run: npm install --no-package-lock
      
      - name: Generate lock file if missing
        if: steps.check-lock-file.outputs.lock_file_exists == 'false'
        run: npm install --package-lock-only --no-package-lock
      
      - name: Build
        run: npm run build
      
      - name: Test
        run: npm run test:simple
        continue-on-error: true
      
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    runs-on: ubuntu-latest
    needs: publish-npm
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract version from package.json
        id: version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      # Will build and push r3e/neo-n3-mcp:latest and r3e/neo-n3-mcp:1.0.4
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            r3e/neo-n3-mcp:latest
            r3e/neo-n3-mcp:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=r3e/neo-n3-mcp:buildcache
          cache-to: type=registry,ref=r3e/neo-n3-mcp:buildcache,mode=max 